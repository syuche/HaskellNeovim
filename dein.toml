[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
let g:deoplete#omni_patterns = {}
'''

[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'badwolf'
    let g:airline#extensions#virtualenv#enabled = 1
    set laststatus=2
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [figitive] <Nop>
    nnoremap <Leader>g [figitive]
    nnoremap <silent> [figitive]s :<C-u>Gstatus<CR>
    nnoremap <silent> [figitive]d :<C-u>Gdiff<CR>
    nnoremap <silent> [figitive]b :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
hook_add = '''
" Align 'then' two spaces after 'if'
let g:haskell_indent_if = 2
" Indent 'where' block two spaces under previous body
let g:haskell_indent_before_where = 2
" Allow a second case indent style (see haskell-vim README)
let g:haskell_indent_case_alternative = 1
" Only next under 'let' if there's an equals sign
let g:haskell_indent_let_no_in = 0

" ----- hindent & stylish-haskell -----

" Indenting on save is too aggressive for me
let g:hindent_on_save = 0

" Helper function, called below with mappings
function! HaskellFormat(which) abort
  if a:which ==# 'hindent' || a:which ==# 'both'
    :Hindent
  endif
  if a:which ==# 'stylish' || a:which ==# 'both'
    silent! exe 'undojoin'
    silent! exe 'keepjumps %!stylish-haskell'
  endif
endfunction

" Key bindings
augroup haskellStylish
  au!
  " Just hindent
  au FileType haskell nnoremap <leader>hi :Hindent<CR>
  " Just stylish-haskell
  au FileType haskell nnoremap <leader>hs :call HaskellFormat('stylish')<CR>
  " First hindent, then stylish-haskell
  au FileType haskell nnoremap <leader>hf :call HaskellFormat('both')<CR>
augroup END
'''

[[plugins]]
repo = 'parsonsmatt/intero-neovim'
hook_ad = '''
" Prefer starting Intero manually (faster startup times)
let g:intero_start_immediately = 0
" Use ALE (works even when not using Intero)
let g:intero_use_neomake = 0

augroup interoMaps
  au!

  au FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
  au FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
  au FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>
  au FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
  au FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

  au FileType haskell nnoremap <silent> <leader>wr :w \| :InteroReload<CR>
  au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
  au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

  au FileType haskell map <leader>t <Plug>InteroGenericType
  au FileType haskell map <leader>T <Plug>InteroType
  au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

  au FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>
  au FileType haskell nnoremap <silent> <leader>iu :InteroUses<CR>
  au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
augroup END
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
   " エラー行に表示するマーク
   let g:ale_sign_error = '⨉'
   let g:ale_sign_warning = '⚠'
   " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
   let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
   " エラー表示の列を常時表示
   let g:ale_sign_column_always = 1

   " ファイルを開いたときにlint実行
   let g:ale_lint_on_enter = 1
   " ファイルを保存したときにlint実行
   let g:ale_lint_on_save = 1
   " 編集中のlintはしない
   let g:ale_lint_on_text_changed = 'never'

   " lint結果をロケーションリストとQuickFixには表示しない
   " 出てると結構うざいしQuickFixを書き換えられるのは困る
   let g:ale_set_loclist = 0
   let g:ale_set_quickfix = 0
   let g:ale_open_list = 0
   let g:ale_keep_list_window_open = 0

   " 有効にするlinter
   let g:ale_linters = {'haskell': ['hlint','ghc-mod'],}

   " ALE用プレフィックス
   nmap [ale] <Nop>
   map <C-k> [ale]
   " エラー行にジャンプ
   nmap <silent> [ale]<C-P> <Plug>(ale_previous)
   nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

